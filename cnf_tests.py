from fol import *

if __name__ == "__main__":
  e1 = And([Predicate("P", Function("f", Variable("x"))), Predicate("P",
        Function("g", Variable("x")))])
  e2 = Or([Predicate("P", Function("h", Variable("x"))), Predicate("i",
        Function("g", Variable("x")))])
  e3 = Implication(e1, e2)
  e4 = Equivalence(e1,e2)
  e5 = ThereExists(Variable("x"), And([Predicate("P", Function("f", Variable("x"))),
        Predicate("P", Function("g", Variable("x")))]))
  e6 = ForAll(Variable("x"), And([Predicate("P", Function("f", Variable("x"))),
        Predicate("P", Function("g", Variable("x")))]))
  print("Orignal Expression:")
  print("Expression 1: ", e1)
  print("Expression 2: ", e2)
  print("Expression 3: ", e3)
  print("Expression 4: ", e4)
  print("Expression 5: ", e5)
  print("Expression 6: ", e6)

  print("\n\nNegated Expressions")
  e1.negate()
  e2.negate()
  e3.negate()
  e4.negate()
  e5.negate()
  e6.negate()
  print("Expression 7: ", e1)
  print("Expression 8: ", e2)
  print("Expression 9: ", e3)
  print("Expression 10: ", e4)
  print("Expression 11: ", e5)
  print("Expression 12: ", e6)

  print("\n\nPushed Negation Expressions")
  e13 = e1.push_negation()
  e14 = e2.push_negation()
  e15 = e3.push_negation()
  e16 = e4.push_negation()
  e17 = e5.push_negation()
  e18 = e6.push_negation()
  print("Expression 13: ", e13)
  print("Expression 14: ", e14)
  print("Expression 15: ", e15)
  print("Expression 16: ", e16)
  print("Expression 17: ", e17)
  print("Expression 18: ", e18)

  print("\n\nRemoving Equivalences")
  test1 = Equivalence(Equivalence(Equivalence(Variable('x'), Variable('x')), Variable('x')), Variable('z'))
  test2 = Or([Equivalence(Variable('x'), Variable('y')),Variable('z')])
  print(test1)
  print(remove_equivalences(test1))
  print("\n")
  print(test2)
  print(remove_equivalences(test2))

  print("\n\nRemoving Implications")
  test3 = Implication(Implication(Variable('x'), Variable('y')), Variable('z'))
  test4 = Implication(Implication(Implication(Variable('x'), Variable('x')), Variable('x')), Variable('z'))
  print(test3)
  print(remove_implications(test3))
  print("\n")
  print(test4)
  print(remove_implications(test4))

  print("\n\nPush Not")
  test5 = And([And([Predicate("P", Function("f", Variable("x"))), Predicate("P",
        Function("g", Variable("x")))]), Predicate("P",Function("g", Variable("x")))])
  test6 = ForAll(Variable("x"), And([Predicate("P", Function("f", Variable("x"))),
        Predicate("P", Function("g", Variable("x")))]))
  test5.negate()
  test6.negate()
  print(test5)
  print(push_nots_inwards(test5))
  print("\n")
  print(test6)
  print(push_nots_inwards(test6))
